
#pragma once
#include "renderer/mesh.h"

/** @brief Set of utilities related to meshes and meshlets.
 * All methods are heavily inspired by https://github.com/zeux/meshoptimizer.
 */
namespace C3D::MeshUtils
{
    struct Meshlet
    {
        u32 vertices[MESHLET_MAX_VERTICES];
        u8 indices[MESHLET_MAX_TRIANGLES][3];
        /** @brief The number of triangles in this Meshlet. */
        u8 triangleCount = 0;
        /** @brief The number of vertices in this Meshlet. */
        u8 vertexCount = 0;
    };

    u32 C3D_API DetermineMaxMeshlets(u64 indexCount, u64 maxVertices, u64 maxTriangles);

    /** @brief Generates meshlets for the provided mesh to be used in a mesh shader.
     *
     * @param indices The array of indices that make up the mesh
     * @param vertexCount The number of vertices in the mesh
     * @param meshlets An array that will hold the generated meshlets
     * @param coneWeight The cone weight used to prioritize how meshlets are generated
     * @return The number of meshlets actually generated (will be <= DetermineMaxMeshlets())
     */
    u32 C3D_API GenerateMeshlets(const DynamicArray<u32>& indices, u64 vertexCount, DynamicArray<MeshUtils::Meshlet>& meshlets, f32 coneWeight = 0.25f);

    /**
     * @brief Generate bounds for the provided Meshlet.
     *
     * @param meshlet The meshlet we want to generate bounds for
     * @param vertices The vertices in the original mesh
     *
     * @return The bounds of the provided Meshlet
     */
    MeshletBounds C3D_API GenerateMeshletBounds(const Meshlet& meshlet, const DynamicArray<Vertex>& vertices);

    /**
     * @brief Generates a remap containing only indices to unique vertices
     * This remap can then be used to generate a mesh with only unique vertices with the corresponding indices.
     *
     * @param outRemap The output remap containing only unique vertices
     * @param vertices The array of vertices you want to remap
     * @param indexCount The number of indices in the mesh
     * @return The number of unique vertices in the array
     */
    u32 C3D_API GenerateVertexRemap(const DynamicArray<Vertex>& vertices, u32 indexCount, DynamicArray<u32>& outRemap);

    /**
     * @brief Using the remap generated by GenerateVertexRemap. This method adds only the unique vertices to the provided mesh.
     *
     * @param mesh The mesh you want to add your vertices to
     * @param indexCount The number of total indices in the mesh
     * @param vertices An array containg the original vertices (before remap)
     * @param remap The remap containing the new mapping of vertices/indices
     */
    void C3D_API RemapVertices(MeshAsset& mesh, u32 indexCount, const DynamicArray<Vertex>& vertices, const DynamicArray<u32>& remap);

    /**
     * @brief Using the remap generated by GenerateVertexRemap. This method adds all indices needed to use the new unique vertices.
     *
     * @param mesh The mesh you want to add your indices to
     * @param indexCount The number of total indices in the mesh
     * @param remap The remap containing the new mapping over vertices/indices
     */
    void C3D_API RemapIndices(MeshAsset& mesh, u32 indexCount, const DynamicArray<u32>& remap);

    /**
     * @brief Optimize mesh for vertex cache. Reorders indices to reduce the number of GPU vertex shader invocations
     *
     * @param mesh The mesh you want to optimize
     */
    void C3D_API OptimizeForVertexCache(MeshAsset& mesh);

    /**
     * @brief Optimize mesh for vertex cache. Reorders indices to reduce the number of GPU vertex shader invocations
     *
     * @param destination The destination array that will contain the optimized indices
     * @param originalIndices The original index data
     * @param vertexCount The number of vertices in the mesh
     */
    void C3D_API OptimizeForVertexCache(DynamicArray<u32>& destination, const DynamicArray<u32>& originalIndices, u64 vertexCount);

    /**
     * @brief Vertex fetch cache optimizer. Reorders vertices and changes indices to reduce the amount of GPU memory fetches during vertex processing
     *
     * @param mesh The mesh you want to optimize
     */
    void C3D_API OptimizeForVertexFetch(MeshAsset& mesh);

    /**
     * @brief Simplify the provided indices into a more simplified mesh version. The output indices are stored in the provided destination array.
     * The simplifier tries to get as close as possible to the target index count and will stop once the error is >= the target error.
     *
     * @param destination An array to store the output indices
     * @param indices The original indices (before simplification)
     * @param vertices The array of vertices in the mesh
     * @param targetIndexCount The target number of indices we expect
     * @param targetError The target maximum error
     * @return The number of actual indices after simplification
     */
    u32 C3D_API Simplify(DynamicArray<u32>& destination, const DynamicArray<u32>& indices, const DynamicArray<Vertex>& vertices, u64 targetIndexCount,
                         f32 targetError);

}  // namespace C3D::MeshUtils