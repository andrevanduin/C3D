
#pragma once
#include "renderer/mesh.h"

namespace C3D::MeshUtils
{
    bool C3D_API BuildMeshlets(Mesh& mesh);

    /**
     * @brief Generates a remap containing only indices to unique vertices
     * This remap can then be used to generate a mesh with only unique vertices with the corresponding indices.
     *
     * Heavily inspired by https://github.com/zeux/meshoptimizer.
     *
     * @param outRemap The output remap containing only unique vertices
     * @param vertices The array of vertices you want to remap
     * @param indexCount The number of indices in the mesh
     * @return The number of unique vertices in the array
     */
    u32 C3D_API GenerateVertexRemap(const DynamicArray<Vertex>& vertices, u32 indexCount, DynamicArray<u32>& outRemap);

    /**
     * @brief Using the remap generated by GenerateVertexRemap. This method adds only the unique vertices to the provided mesh.
     *
     * Heavily inspired by https://github.com/zeux/meshoptimizer.
     *
     * @param mesh The mesh you want to add your vertices to
     * @param indexCount The number of total indices in the mesh
     * @param vertices An array containg the original vertices (before remap)
     * @param remap The remap containing the new mapping of vertices/indices
     */
    void C3D_API RemapVertices(Mesh& mesh, u32 indexCount, const DynamicArray<Vertex>& vertices, const DynamicArray<u32>& remap);

    /**
     * @brief Using the remap generated by GenerateVertexRemap. This method adds all indices needed to use the new unique vertices.
     *
     * Heavily inspired by https://github.com/zeux/meshoptimizer.
     *
     * @param mesh The mesh you want to add your indices to
     * @param indexCount The number of total indices in the mesh
     * @param remap The remap containing the new mapping over vertices/indices
     */
    void C3D_API RemapIndices(Mesh& mesh, u32 indexCount, const DynamicArray<u32>& remap);
}  // namespace C3D::MeshUtils